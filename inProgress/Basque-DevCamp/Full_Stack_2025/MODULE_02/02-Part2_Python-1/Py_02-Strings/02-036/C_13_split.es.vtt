WEBVTT

1
00:00:01.234 --> 00:00:02.450
[Narrador] En la última guía, pasamos por

2
00:00:02.450 --> 00:00:05.430
cómo usar la función de partición

3
00:00:05.430 --> 00:00:08.740
en Python para ser capaces de dividir una cuerda

4
00:00:08.740 --> 00:00:12.300
en 3 elementos, y eso puede ser muy útil

5
00:00:12.300 --> 00:00:15.300
cuando tu quieras una sola partición.

6
00:00:15.300 --> 00:00:17.410
Pero vamos a extender esto, y ahora vamos a hablar

7
00:00:17.410 --> 00:00:21.500
sobre la función de dividir en Python,

8
00:00:21.500 --> 00:00:25.370
y cómo podemos usar dividir para romper nuestra cuerda

9
00:00:25.370 --> 00:00:29.050
dentro muchos diferentes elementos como queramos,

10
00:00:29.050 --> 00:00:31.890
así que voy a mantener todo este código aquí,

11
00:00:31.890 --> 00:00:33.870
pero voy a comentarlo,

12
00:00:33.870 --> 00:00:35.650
y la razón para eso es porque

13
00:00:35.650 --> 00:00:38.750
quiero ser capaz de ver ambos de estos

14
00:00:38.750 --> 00:00:41.520
procesos de lado a lado, porque son similares,

15
00:00:41.520 --> 00:00:44.690
pero tienen las mismas diferencias claves.

16
00:00:44.690 --> 00:00:47.380
Vas muy seguramente a usar dividir

17
00:00:47.380 --> 00:00:50.010
en tu día a día de desarrollo en Python,

18
00:00:50.010 --> 00:00:53.300
sin embargo es bueno cuando quieres tener

19
00:00:53.300 --> 00:00:56.520
en un solo lugar, en un solo delimitador,

20
00:00:56.520 --> 00:01:01.520
eso separa una sola cuerda dentro de dos partes diferentes,

21
00:01:01.940 --> 00:01:04.260
3 partes si cuentas el mismo delimitador,

22
00:01:04.260 --> 00:01:06.750
pero eso es cuando deberías usar partición.

23
00:01:06.750 --> 00:01:09.610
Pero con dividir, vamos a dar un ejemplo práctico

24
00:01:09.610 --> 00:01:12.310
de cuando usar esto, así que voy a crear

25
00:01:12.310 --> 00:01:15.410
una variable aquí llamada etiqueta, así que puedes imaginar

26
00:01:15.410 --> 00:01:18.880
esto siendo las etiquetas para un vídeo de Youtube,

27
00:01:18.880 --> 00:01:22.010
o una publicación de un blog, o nada como eso,

28
00:01:22.010 --> 00:01:24.930
y va a ser una sola cuerda, así que puedo decir

29
00:01:24.930 --> 00:01:29.930
Python, códigos, Programas, desarrollo.

30
00:01:32.910 --> 00:01:35.640
Así que eso es una cuerda, pero tiene un número

31
00:01:35.640 --> 00:01:39.980
de comas que separar cada una de estas etiquetas.

32
00:01:39.980 --> 00:01:43.490
Así que lo que voy a hacer aquí, es que voy a usar

33
00:01:43.490 --> 00:01:48.220
nuestra habilidad de simplemente redefinir y reasignar

34
00:01:48.220 --> 00:01:52.170
esta variable, así que voy a decir etiquetas es igual

35
00:01:52.170 --> 00:01:57.170
a etiquetas punto dividir, y de hecho pienso

36
00:01:57.240 --> 00:01:59.117
que voy a cambiar mi mente en esto,

37
00:01:59.117 --> 00:02:01.100
y la razón es porque es considerado

38
00:02:01.100 --> 00:02:04.730
una mala práctica de reafirmar una variable

39
00:02:04.730 --> 00:02:07.090
de un tipo a otro tipo diferente,

40
00:02:07.090 --> 00:02:10.650
así que lo que dividir va a hacer es de hecho

41
00:02:10.650 --> 00:02:15.650
volver a una lista, así que va a comenzar

42
00:02:16.010 --> 00:02:17.500
con una cuerda justo aquí y luego va a convertir

43
00:02:17.500 --> 00:02:20.880
eso en una lista de elementos,

44
00:02:20.880 --> 00:02:24.710
así que si eres un desarrollador trabajando en alguna

45
00:02:24.710 --> 00:02:27.160
aplicación, y en un punto

46
00:02:27.160 --> 00:02:30.550
la variable de etiqueta es una cuerda pero en un punto

47
00:02:30.550 --> 00:02:34.250
diferente se vuelve en una lista, que puede,

48
00:02:34.250 --> 00:02:36.260
seguramente te encontrarás con algunos errores,

49
00:02:36.260 --> 00:02:39.510
porque si llamaste, digamos, el caso de arriba

50
00:02:39.510 --> 00:02:40.980
o llamaste algún tipo de método

51
00:02:40.980 --> 00:02:43.040
que solo puedes usar en una cuerda,

52
00:02:43.040 --> 00:02:46.040
pero lo llamaste cuando era una lista,

53
00:02:46.040 --> 00:02:48.580
recibirías un error, así que vamos solamente a

54
00:02:48.580 --> 00:02:50.040
hacerlo bien, desde el principio,

55
00:02:50.040 --> 00:02:53.350
así que voy a decir lista de etiquetas,

56
00:02:53.350 --> 00:02:57.330
y eso va a ser llamado etiquetas punto dividir,

57
00:02:57.330 --> 00:03:00.000
y mucho como una función de partición,

58
00:03:00.000 --> 00:03:02.840
lo que hace el dividir, es que tienes un argumento

59
00:03:02.840 --> 00:03:06.480
de donde quieres dividir tu cuerda,

60
00:03:06.480 --> 00:03:08.770
así que en este caso, quiero dividirlo

61
00:03:08.770 --> 00:03:11.850
en cada lugar donde encuentra una coma.

62
00:03:11.850 --> 00:03:14.720
Así que eso nos va a dar

63
00:03:14.720 --> 00:03:17.580
4 elementos diferentes en nuestra lista,

64
00:03:17.580 --> 00:03:22.580
así que ahora, puedo decir imprimir lista de etiquetas,

65
00:03:23.210 --> 00:03:25.440
y nos debería dar nuestra lista,

66
00:03:25.440 --> 00:03:28.250
así que hago eso, puedes ver que ahora tenemos

67
00:03:28.250 --> 00:03:31.430
una lista la cual, si estas viniendo de un tipo diferente

68
00:03:31.430 --> 00:03:34.560
de lenguaje programado como un Javascript o Ruby,

69
00:03:34.560 --> 00:03:38.220
esto es llamado un conjunto, pero esto es

70
00:03:38.220 --> 00:03:41.060
una lista en Python, y volveremos eso

71
00:03:41.060 --> 00:03:44.010
en nuestra sección de colección, pero tenemos

72
00:03:44.010 --> 00:03:46.350
nuestro conjuntos de elementos aquí,

73
00:03:46.350 --> 00:03:50.550
tenemos un Python, códigos, programas, y desarrollo,

74
00:03:50.550 --> 00:03:53.260
pero este es un tipo diferente de

75
00:03:53.260 --> 00:03:55.500
estructura de datos, así que ahora es una colección

76
00:03:55.500 --> 00:03:57.770
y podemos usarlo como queramos,

77
00:03:57.770 --> 00:03:59.420
podríamos ir y podríamos adicionar

78
00:03:59.420 --> 00:04:02.110
cada uno de estos elementos en una base de datos,

79
00:04:02.110 --> 00:04:04.210
podríamos mostrarlos en una página web

80
00:04:04.210 --> 00:04:08.180
con un tipo específico de mirada y sensación,

81
00:04:08.180 --> 00:04:10.800
una vez lo hemos convertido en una colección,

82
00:04:10.800 --> 00:04:14.350
lo hace mucho más fácil de ser capaz de trabajar con ello,

83
00:04:14.350 --> 00:04:17.570
así que esto es un muy buen ejemplo, y un muy práctico

84
00:04:17.570 --> 00:04:21.040
ejemplo de cuando quisieras usar el dividir.

85
00:04:21.040 --> 00:04:26.040
Ahora dividir, puede funcionar sin ningún argumento del todo

86
00:04:26.330 --> 00:04:31.330
así que si tomaramos esto, y decirmos dividir etiqueta aquí

87
00:04:35.250 --> 00:04:39.400
y no pases argumentos, verás si funciona esto,

88
00:04:39.400 --> 00:04:41.670
verás que obtienes diferentes comportamientos,

89
00:04:41.670 --> 00:04:44.100
la forma en que dividir funciona por defecto,

90
00:04:44.100 --> 00:04:46.210
si no pasas ningún argumento,

91
00:04:46.210 --> 00:04:50.160
es que simplemente conviertes tu cuerda dentro

92
00:04:50.160 --> 00:04:53.950
de un conjunto, o en una lista, y será una lista

93
00:04:53.950 --> 00:04:56.900
con un solo elemento, nota que no

94
00:04:56.900 --> 00:05:00.870
rompió cada uno de estos en sus propios elementos,

95
00:05:00.870 --> 00:05:04.030
en vez de eso ahora tienes esta lista con cada uno,

96
00:05:04.030 --> 00:05:07.300
eso es llenado con la cuerda, y parte de la razón

97
00:05:07.300 --> 00:05:09.550
por la cual quería hacer esto era porque,

98
00:05:09.550 --> 00:05:12.500
si miras este código justo aquí en la línea 8,

99
00:05:12.500 --> 00:05:15.180
si ves esta cuerda, se ve

100
00:05:15.180 --> 00:05:18.350
un estilo similar a lo que tenemos justo aquí,

101
00:05:18.350 --> 00:05:21.460
así que quería mostrarles que son muy diferentes,

102
00:05:21.460 --> 00:05:25.020
lo que hace dividir, es convertir esto en una lista,

103
00:05:25.020 --> 00:05:28.990
para que cada uno de estos es ahora su propio elemento,

104
00:05:28.990 --> 00:05:32.840
es su propia cuerda, ya sea que

105
00:05:32.840 --> 00:05:35.410
lo que tenemos aquí en la línea 8, y luego también

106
00:05:35.410 --> 00:05:38.380
lo que pasa si llamas a dividir sin ningún argumento,

107
00:05:38.380 --> 00:05:41.690
es un objeto solo de cuerda, y entonces

108
00:05:41.690 --> 00:05:44.630
ahí es donde esta la diferencia, así que esa es una

109
00:05:44.630 --> 00:05:48.300
diferencia entre dividir sin argumentos,

110
00:05:48.300 --> 00:05:51.440
y luego posiblemente puedes ver la

111
00:05:51.440 --> 00:05:55.780
diferencia en la partición, y escogí estos ejemplos

112
00:05:55.780 --> 00:05:58.970
intencionalmente, y la razón es porque

113
00:05:58.970 --> 00:06:01.250
quería mostrarles un buen ejemplo

114
00:06:01.250 --> 00:06:05.500
de cuando usas partición versus dividir,

115
00:06:05.500 --> 00:06:08.513
así que voy a continuar con nuestro ejemplo,

116
00:06:09.520 --> 00:06:12.760
e imaginemos que queríamos usar

117
00:06:12.760 --> 00:06:15.600
dividir con este título.

118
00:06:15.600 --> 00:06:18.640
Ahora, técnicamente funcionaría si empezamos

119
00:06:18.640 --> 00:06:23.540
con solo este ejemplo,

120
00:06:23.540 --> 00:06:25.530
debería decir, si, solo voy a,

121
00:06:25.530 --> 00:06:28.010
todo desde la coma simplemente voy a sacarla

122
00:06:28.010 --> 00:06:30.640
justo así, así que si quisiera

123
00:06:30.640 --> 00:06:35.440
llamar al título y solo hacer algún tipo de

124
00:06:35.440 --> 00:06:38.460
reasignación, para poder decir lista de título,

125
00:06:38.460 --> 00:06:42.210
y luego título punto dividir,

126
00:06:42.210 --> 00:06:46.980
y pasar esto, así, puedo imprimir esto,

127
00:06:46.980 --> 00:06:49.430
y nos dará un poco más de espacio, solo para que lo puedas

128
00:06:49.430 --> 00:06:53.750
ver, así que digo imprimir la lista de títulos,

129
00:06:53.750 --> 00:06:58.470
y luego la imprimo y pueden ver que tenemos Python,

130
00:06:58.470 --> 00:07:03.120
una introducción, así que volvemos a estas listas de

131
00:07:03.120 --> 00:07:06.460
elementos, y eso es bueno, sin embargo una cosa

132
00:07:06.460 --> 00:07:11.040
que es muy útil cuando se trata de usar partición,

133
00:07:11.040 --> 00:07:15.320
es lo que devuelve contra lo que devuelve dividir.

134
00:07:15.320 --> 00:07:20.320
Partición devuelve una tupla, y dividir devuelve una lista.

135
00:07:22.100 --> 00:07:25.200
Ahora, si no estabas familiarizado con las estructuras de

136
00:07:25.200 --> 00:07:27.630
datos de Python, entonces eso probablemente no quiere decir

137
00:07:27.630 --> 00:07:31.540
mucho para ti, pero, hablaremos sobre las diferencias claves

138
00:07:31.540 --> 00:07:35.490
entre los dos, las diferencias claves justo ahora

139
00:07:35.490 --> 00:07:39.990
es que es muy fácil hacer cosas como

140
00:07:39.990 --> 00:07:43.600
una desconstrucción variable , como la que hicimos aquí,

141
00:07:43.600 --> 00:07:46.350
con una partición, o con una tupla,

142
00:07:46.350 --> 00:07:49.000
lo cual es lo que devuelve partición,

143
00:07:49.000 --> 00:07:51.930
así que cuando estés haciendo una tarea como esta,

144
00:07:51.930 --> 00:07:54.800
donde tienes algunos valores, estas muy confiado

145
00:07:54.800 --> 00:07:57.600
sobre la estructura de esos valores como ellos viniendo

146
00:07:57.600 --> 00:08:01.090
de API, o algún tipo de fuente como esa,

147
00:08:01.090 --> 00:08:03.020
así que sabes que siempre

148
00:08:03.020 --> 00:08:06.530
vas a tener este tipo de estructura,

149
00:08:06.530 --> 00:08:09.330
entonces usar partición tiene mucho sentido,

150
00:08:09.330 --> 00:08:11.850
y es fácil de usar, y puedes dividir

151
00:08:11.850 --> 00:08:14.980
esa tupla en tantos pedazos como necesites,

152
00:08:14.980 --> 00:08:17.920
y luego puedes usar esos, y justo aquí,

153
00:08:17.920 --> 00:08:21.260
en este caso, otra vez, quieres 3 elementos diferentes,

154
00:08:21.260 --> 00:08:25.110
ya sea lo que hace dividir, es mucho más flexible,

155
00:08:25.110 --> 00:08:30.110
funciona con conjuntos más amplios de tipos de cuerdas,

156
00:08:30.520 --> 00:08:32.980
como lo que tenemos aquí con las etiquetas.

157
00:08:32.980 --> 00:08:35.430
Si le preguntáramos a partición sobre las etiquetas,

158
00:08:35.430 --> 00:08:39.680
todo lo que terminaríamos consiguiendo es el primer elemento

159
00:08:39.680 --> 00:08:42.470
luego obtendríamos la coma, y luego

160
00:08:42.470 --> 00:08:45.980
tendríamos el resto de estos como una sola cuerda,

161
00:08:45.980 --> 00:08:48.800
así que en ese caso, partición no sería

162
00:08:48.800 --> 00:08:50.810
una muy buena opción,

163
00:08:50.810 --> 00:08:54.720
pero dividir nos permite romper toda la cuerda en

164
00:08:54.720 --> 00:08:59.030
tantos elementos como la cuerda tenga,

165
00:08:59.030 --> 00:09:02.390
y luego podemos trabajar con todos esos independientemente,

166
00:09:02.390 --> 00:09:04.770
así que eso era realmente lo que quería que vieran,

167
00:09:04.770 --> 00:09:07.420
era ser capaz de ver la diferencia

168
00:09:07.420 --> 00:09:09.960
cuando quisieras usar partición,

169
00:09:09.960 --> 00:09:12.200
cuando quisieras usar dividir,

170
00:09:12.200 --> 00:09:14.780
refiriendo a mi propia experiencia de práctica,

171
00:09:14.780 --> 00:09:17.690
diría que yo probablemente, cuando necesito hacer una

172
00:09:17.690 --> 00:09:20.500
tarea como esta, probablemente uso dividir

173
00:09:20.500 --> 00:09:23.880
cerca del 95% del tiempo, partición solo el 5% del tiempo,

174
00:09:23.880 --> 00:09:27.570
porque típicamente cuando quiero usar dividir

175
00:09:27.570 --> 00:09:31.230
en una cuerda, es muy raro que necesite

176
00:09:31.230 --> 00:09:35.540
tener 3 elementos, usualmente intento obtener,

177
00:09:35.540 --> 00:09:37.660
usualmente trato de obtener todos los elementos

178
00:09:37.660 --> 00:09:40.640
dentro de ello, así que esa es una de las diferencias claves

179
00:09:40.640 --> 00:09:43.600
pero seguramente les recomiendo tomar este código,

180
00:09:43.600 --> 00:09:46.670
jugar con el, jugar con algunos ejemplos

181
00:09:46.670 --> 00:09:50.490
que podrás ver en aplicaciones con las que trabajas,

182
00:09:50.490 --> 00:09:54.253
ser capaz de ver cuando quisieras usar una contra la otra.

