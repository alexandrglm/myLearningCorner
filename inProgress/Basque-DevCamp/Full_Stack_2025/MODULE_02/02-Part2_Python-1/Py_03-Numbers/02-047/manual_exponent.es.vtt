WEBVTT

1
00:00:01.030 --> 00:00:03.080
<v Instructor>En este ejercicio de codificación de Python,</v>

2
00:00:03.080 --> 00:00:07.060
vamos a construir una función manual exponente.

3
00:00:07.060 --> 00:00:10.090
Y lo que quiero decir con un manual exponente es,

4
00:00:10.090 --> 00:00:12.090
escribamos algunos casos de prueba.

5
00:00:12.090 --> 00:00:16.180
Da la habilidad de pasar dos argumentos.

6
00:00:16.180 --> 00:00:20.350
Así que si digo manual_exponente,

7
00:00:20.350 --> 00:00:24.220
y luego pasamos dos y luego tres,

8
00:00:24.220 --> 00:00:29.220
entonces el valor de retorno de esto debería ser ocho.

9
00:00:29.800 --> 00:00:33.830
Y si yo hiciera lo mismo con otros valores,

10
00:00:33.830 --> 00:00:38.430
así que si digo, ¿cuánto es 10 al cuadrado?,

11
00:00:39.350 --> 00:00:44.230
entonces este debería ser 100, y así sucesivamente.

12
00:00:44.230 --> 00:00:47.330
Así que hay algunas maneras en las que puedes hacer esto,

13
00:00:47.330 --> 00:00:50.100
y te daré un par de recomendaciones diferentes

14
00:00:50.100 --> 00:00:51.460
antes que pauses el vídeo

15
00:00:51.460 --> 00:00:53.470
y trates de construir esto por ti mismo.

16
00:00:53.470 --> 00:00:57.210
Así que voy a mostrarte dos soluciones diferentes.

17
00:00:57.210 --> 00:01:01.310
Y una es una forma manual de hacerlo.

18
00:01:01.310 --> 00:01:03.980
Es lo que se llama un enfoque iterativo

19
00:01:03.980 --> 00:01:08.580
donde simplemente vamos a iterar sobre los elementos

20
00:01:08.580 --> 00:01:11.150
y luego construir la solución.

21
00:01:11.150 --> 00:01:14.300
Y luego también voy a mostrarte un enfoque funcional.

22
00:01:14.300 --> 00:01:17.210
Y un enfoque funcional va a servir de multiplicador,

23
00:01:17.210 --> 00:01:20.000
y aquí es donde estará una de las pistas.

24
00:01:20.000 --> 00:01:23.210
Va a potenciar la función de reducir.

25
00:01:23.210 --> 00:01:28.206
Así que importarás de functools, importar reducir.

26
00:01:30.760 --> 00:01:35.080
Y si estás interesado en utilizar esta segunda solución

27
00:01:35.080 --> 00:01:37.660
en la construcción de un enfoque funcional,

28
00:01:37.660 --> 00:01:40.730
entonces puedes ir a leer las guías,

29
00:01:40.730 --> 00:01:43.370
ver los ejemplos de la función reducir

30
00:01:43.370 --> 00:01:46.160
y luego construirlo a partir de ahí.

31
00:01:46.160 --> 00:01:48.480
Así que una vez más, lo que buscamos hacer

32
00:01:48.480 --> 00:01:51.450
es construir una función llamada manual exponente

33
00:01:51.450 --> 00:01:52.990
que tiene en cuenta dos argumentos,

34
00:01:52.990 --> 00:01:57.610
y usa lo que sea que el primer argumento sea como base,

35
00:01:57.610 --> 00:02:00.530
y el siguiente argumento es el exponente,

36
00:02:00.530 --> 00:02:04.060
y devuelve el valor que es.

37
00:02:04.060 --> 00:02:05.890
Así que ahora mismo puedes pausar el vídeo

38
00:02:05.890 --> 00:02:08.410
y cuando volvamos, entonces podrás verme

39
00:02:08.410 --> 00:02:11.083
ensayar las dos soluciones.

40
00:02:12.120 --> 00:02:15.127
Así que espero que hayas pasado un buen rato ensayando eso

41
00:02:15.127 --> 00:02:17.260
y construyendo esas soluciones.

42
00:02:17.260 --> 00:02:21.000
La primera forma en que voy a construir esto

43
00:02:21.000 --> 00:02:23.310
es con un enfoque iterativo.

44
00:02:23.310 --> 00:02:25.975
Así que voy a crear una función aquí

45
00:02:25.975 --> 00:02:30.640
llamado manual_exponente, y va a tomar

46
00:02:30.640 --> 00:02:35.470
un número y un exponente como argumentos.

47
00:02:35.470 --> 00:02:37.350
Y entonces lo que haré es

48
00:02:37.350 --> 00:02:39.770
voy a crear un par de variables.

49
00:02:39.770 --> 00:02:42.880
Voy a crear una variable contador,

50
00:02:42.880 --> 00:02:47.620
que va a tener el exponente menos uno.

51
00:02:47.620 --> 00:02:50.500
Y te explicaré por qué estoy haciendo eso aquí en breve.

52
00:02:50.500 --> 00:02:54.030
Y luego también voy a hacer un seguimiento del total,

53
00:02:54.030 --> 00:02:57.230
y el total va a, por defecto,

54
00:02:57.230 --> 00:03:00.350
ajustarse a cualquiera que sea el valor de número.

55
00:03:00.350 --> 00:03:03.460
Así que si pasamos dos, este total se fija en dos

56
00:03:03.460 --> 00:03:04.480
para empezar.

57
00:03:04.480 --> 00:03:06.250
Si son 10, son 10.

58
00:03:06.250 --> 00:03:09.480
Y luego, a partir de ahí, voy a crear un bucle de tiempo.

59
00:03:09.480 --> 00:03:14.480
Voy a decir bucle contador sea mayor que cero,

60
00:03:15.220 --> 00:03:18.590
entonces quiero que tomes el total

61
00:03:18.590 --> 00:03:22.490
y luego usando nuestra asignación,

62
00:03:22.490 --> 00:03:26.060
voy a decir que asterisco es igual,

63
00:03:26.060 --> 00:03:28.470
así que esto nos dará un producto.

64
00:03:28.470 --> 00:03:32.770
Así que el total va a ser igual a número.

65
00:03:32.770 --> 00:03:36.520
Y ahora esto es exactamente lo mismo que decir

66
00:03:36.520 --> 00:03:40.690
total es igual a total por número.

67
00:03:40.690 --> 00:03:43.680
Esto es sólo una sintaxis abreviada para poder

68
00:03:43.680 --> 00:03:46.320
realizar ese tipo de asignación.

69
00:03:46.320 --> 00:03:48.750
Y luego, desde allí, también tenemos que

70
00:03:48.750 --> 00:03:51.130
toma el contador y disminuirlo.

71
00:03:51.130 --> 00:03:54.590
Así que voy a reducirlo en uno.

72
00:03:54.590 --> 00:03:58.010
Una vez más, si esa sintaxis se ve un poco rara,

73
00:03:58.010 --> 00:03:59.779
eso es exactamente lo mismo que decir

74
00:03:59.779 --> 00:04:03.790
contador es igual a contador menos uno.

75
00:04:03.790 --> 00:04:06.290
Pero me gusta esta sintaxis, es un poco más corta,

76
00:04:06.290 --> 00:04:08.165
y si estás acostumbrado a usar

77
00:04:08.165 --> 00:04:10.170
contadores de incrementos y decrecientes,

78
00:04:10.170 --> 00:04:11.490
entonces tiene sentido.

79
00:04:11.490 --> 00:04:13.130
Y luego, cuando baje aquí,

80
00:04:13.130 --> 00:04:16.560
sólo voy a devolver el total.

81
00:04:16.560 --> 00:04:19.000
Entonces, ¿qué está pasando aquí exactamente?

82
00:04:19.000 --> 00:04:22.320
Bueno, estoy creando una variable contador,

83
00:04:22.320 --> 00:04:25.270
y por defecto se va a establecer

84
00:04:25.270 --> 00:04:29.130
a cualquiera que sea el valor exponente menos uno.

85
00:04:29.130 --> 00:04:32.420
Y la razón de eso es porque estoy estableciendo el total

86
00:04:32.420 --> 00:04:36.030
igual a cualquiera que sea el valor de número.

87
00:04:36.030 --> 00:04:40.750
Así que si miras lo que es realmente un exponente,

88
00:04:40.750 --> 00:04:43.930
así que vamos a repasar eso aquí.

89
00:04:43.930 --> 00:04:48.930
Así que recuerda que un exponente es algo así.

90
00:04:48.930 --> 00:04:53.600
Si decimos dos a la potencia de tres,

91
00:04:53.600 --> 00:04:55.966
eso es realmente lo mismo que decir

92
00:04:55.966 --> 00:05:00.820
dos veces dos veces dos,

93
00:05:00.820 --> 00:05:03.899
así que si estamos tratando de seguirle la pista a esto,

94
00:05:03.899 --> 00:05:08.870
que los dos primeros aquí van a ser cubiertos

95
00:05:08.870 --> 00:05:11.440
cuando asignamos un total igual a número.

96
00:05:11.440 --> 00:05:13.700
Así que si no restamos esto,

97
00:05:13.700 --> 00:05:17.500
entonces estaríamos multiplicando una vez más.

98
00:05:17.500 --> 00:05:21.210
Así que esa es la razón por la que le restamos uno.

99
00:05:21.210 --> 00:05:24.090
Entonces aquí en el contador comprobamos para ver

100
00:05:24.090 --> 00:05:27.620
si el contador es mayor que cero,

101
00:05:27.620 --> 00:05:30.210
y luego va a continuar este bucle

102
00:05:30.210 --> 00:05:32.960
hasta que el contador lo baje a cero.

103
00:05:32.960 --> 00:05:35.350
Y cada vez va a tomar el total

104
00:05:35.350 --> 00:05:39.090
y luego va a multiplicar ese total

105
00:05:39.090 --> 00:05:41.718
y seguir construyendo exponencialmente

106
00:05:41.718 --> 00:05:43.490
sea cual sea el valor,

107
00:05:43.490 --> 00:05:46.000
y luego cada vez disminuye el contador.

108
00:05:46.000 --> 00:05:49.570
Así que la primera vez, el contador va a,

109
00:05:49.570 --> 00:05:51.425
para este ejemplo específico,

110
00:05:51.425 --> 00:05:53.490
el contador va a empezar en dos,

111
00:05:53.490 --> 00:05:55.460
entonces va a iterar,

112
00:05:55.460 --> 00:05:58.600
se multiplicará dos veces por dos, que serán cuatro.

113
00:05:58.600 --> 00:06:02.905
Entonces disminuirá ese contador a uno,

114
00:06:02.905 --> 00:06:06.240
lo que significa que sólo le queda una vez más,

115
00:06:06.240 --> 00:06:09.070
y luego se multiplicará por dos una vez más,

116
00:06:09.070 --> 00:06:11.290
y así es como consigues ocho.

117
00:06:11.290 --> 00:06:13.310
Así que hagamos esto sólo para asegurarnos

118
00:06:13.310 --> 00:06:15.076
que esta versión está funcionando

119
00:06:15.076 --> 00:06:16.790
y no tenga ningún error tipográfico.

120
00:06:16.790 --> 00:06:21.790
Así que iremos y tomaremos nuestros ejemplos de aquí arriba.

121
00:06:25.700 --> 00:06:27.575
Deshazte de eso.

122
00:06:27.575 --> 00:06:30.880
Y ahora vamos a añadir algunas declaraciones impresas

123
00:06:30.880 --> 00:06:34.110
para que podamos ver esto en acción.

124
00:06:34.110 --> 00:06:36.970
Así que vamos a añadir eso.

125
00:06:36.970 --> 00:06:40.890
De acuerdo, entonces vamos a ir y llevar esto.

126
00:06:40.890 --> 00:06:44.490
Este es el manual exponente.

127
00:06:44.490 --> 00:06:47.550
Si ejecuto eso, puedes ver que tenemos 8 y 100.

128
00:06:47.550 --> 00:06:49.900
Así que esto está funcionando muy bien,

129
00:06:49.900 --> 00:06:53.670
y esta es, si esta es la solución que construiste,

130
00:06:53.670 --> 00:06:55.370
está completamente bien.

131
00:06:55.370 --> 00:06:57.040
Esto es lo que se llamaría

132
00:06:57.040 --> 00:07:00.100
un enfoque iterativo de la solución.

133
00:07:00.100 --> 00:07:05.100
Ahora, lo que quiero mostrarles es una solución funcional.

134
00:07:05.780 --> 00:07:07.743
Así que vamos a ir aquí.

135
00:07:08.710 --> 00:07:11.940
Y voy a, oh, sabes qué,

136
00:07:11.940 --> 00:07:14.580
voy a deshacerme de esto aquí, en las notas del programa

137
00:07:14.580 --> 00:07:16.690
tendrás acceso a él.

138
00:07:16.690 --> 00:07:18.680
Así que si quieres ir a ver esto,

139
00:07:18.680 --> 00:07:21.830
puedes acceder a él en las notas del programa y tomarlo.

140
00:07:21.830 --> 00:07:23.649
Pero por el momento no quiero que

141
00:07:23.649 --> 00:07:26.240
te confundas al verlos a los dos

142
00:07:26.240 --> 00:07:27.560
uno al lado del otro.

143
00:07:27.560 --> 00:07:30.450
Así que aquí, con el enfoque funcional,

144
00:07:30.450 --> 00:07:33.060
va a ser mucho más rápido de escribir,

145
00:07:33.060 --> 00:07:34.950
pero con eso dicho,

146
00:07:34.950 --> 00:07:38.550
puede ser considerado un poco más difícil de leer,

147
00:07:38.550 --> 00:07:40.574
especialmente si no estás acostumbrado a usar

148
00:07:40.574 --> 00:07:42.070
herramientas como reducir.

149
00:07:42.070 --> 00:07:44.500
Pero es importante tener un entendimiento

150
00:07:44.500 --> 00:07:46.100
por lo que está pasando aquí,

151
00:07:46.100 --> 00:07:49.450
incluso si prefieres usar el enfoque iterativo.

152
00:07:49.450 --> 00:07:53.110
La razón por la que quise incluir este enfoque funcional

153
00:07:53.110 --> 00:07:55.401
es porque a medida que te desarrollas

154
00:07:55.401 --> 00:07:57.560
como programador de Python,

155
00:07:57.560 --> 00:07:59.560
lo que vas a encontrar es que te vas a encontrar con

156
00:07:59.560 --> 00:08:03.840
mucha documentación y mucho código de otros desarrolladores

157
00:08:03.840 --> 00:08:06.980
que usarán este tipo de enfoque funcional

158
00:08:06.980 --> 00:08:09.740
para construir este tipo de sistemas

159
00:08:09.740 --> 00:08:11.400
en este tipo de funcionalidad,

160
00:08:11.400 --> 00:08:15.770
y si no estás acostumbrado a construir esto tú mismo

161
00:08:15.770 --> 00:08:17.260
entonces lo que va a pasar es que

162
00:08:17.260 --> 00:08:19.420
vas a ver ese código,

163
00:08:19.420 --> 00:08:21.840
y no vas a tener ni idea de lo que está pasando.

164
00:08:21.840 --> 00:08:24.600
Por eso es una buena idea.

165
00:08:24.600 --> 00:08:26.800
Así que lo primero que voy a hacer

166
00:08:26.800 --> 00:08:31.270
es que voy a usar una lista computada.

167
00:08:31.270 --> 00:08:36.270
Así que voy a decir lista_computada,

168
00:08:36.530 --> 00:08:38.200
y puedes llamarlo como quieras,

169
00:08:38.200 --> 00:08:41.250
pero me gusta usarlo porque computada,

170
00:08:41.250 --> 00:08:42.420
lo que vamos a estar haciendo aquí

171
00:08:42.420 --> 00:08:43.960
es que vamos a construir una lista,

172
00:08:43.960 --> 00:08:46.360
y vamos a hacerlo dinámicamente

173
00:08:46.360 --> 00:08:48.193
y creo que la lista computada

174
00:08:48.193 --> 00:08:50.160
es una buena forma de describirlo.

175
00:08:50.160 --> 00:08:52.670
Y la sintaxis que vamos a usar

176
00:08:52.670 --> 00:08:54.810
es que voy a decir número,

177
00:08:54.810 --> 00:08:59.810
y luego decir número por, sea cual sea el exponente.

178
00:09:01.340 --> 00:09:03.260
Ahora, si ese código te parece raro,

179
00:09:03.260 --> 00:09:06.390
vamos a cambiar la consola de lenguaje muy rápido

180
00:09:06.390 --> 00:09:08.770
y ver exactamente qué está pasando aquí.

181
00:09:08.770 --> 00:09:13.630
Digamos que tenemos algún tipo de número.

182
00:09:13.630 --> 00:09:18.590
Así que pondremos aquí tres, y luego,

183
00:09:18.590 --> 00:09:21.670
Oh, y en realidad necesito almacenar esto en una variable.

184
00:09:21.670 --> 00:09:26.670
Usaremos el mismo nombre, lista_computada es igual a tres

185
00:09:27.900 --> 00:09:30.600
y luego por dos.

186
00:09:30.600 --> 00:09:33.760
Lo que esto va a hacer si miras a

187
00:09:33.760 --> 00:09:35.933
lo que la lista computada te da ahora,

188
00:09:37.520 --> 00:09:42.520
es que te dará una lista con dos artículos,

189
00:09:42.930 --> 00:09:44.490
ambos de los cuales son tres.

190
00:09:44.490 --> 00:09:47.870
Así que si alguna vez necesitas hacer una lista

191
00:09:47.870 --> 00:09:49.350
y sabes que todos los elementos

192
00:09:49.350 --> 00:09:50.810
que quieres dentro de ella,

193
00:09:50.810 --> 00:09:54.700
esta es una buena forma de poder construirlo.

194
00:09:54.700 --> 00:09:56.670
Así que eso es todo lo que estamos haciendo.

195
00:09:56.670 --> 00:09:59.310
es que sólo estamos diciendo que quiero hacer una lista,

196
00:09:59.310 --> 00:10:02.140
quiero que cada uno de los artículos de la lista

197
00:10:02.140 --> 00:10:07.140
sea este valor numérico, y quiero que el número de elementos

198
00:10:07.470 --> 00:10:09.680
sean igual al exponente.

199
00:10:09.680 --> 00:10:12.974
Y luego desde allí podemos simplemente volver

200
00:10:12.974 --> 00:10:17.050
el valor de la función reducir.

201
00:10:17.050 --> 00:10:19.630
Así que ahora podemos construir la función reducir

202
00:10:19.630 --> 00:10:22.330
y ya puedo decirte que me voy a quedar sin espacio aquí,

203
00:10:22.330 --> 00:10:24.590
así que voy a cerrar esto.

204
00:10:24.590 --> 00:10:26.390
Y ahora podemos construir esto.

205
00:10:26.390 --> 00:10:28.780
Así que voy a decir reducir.

206
00:10:28.780 --> 00:10:31.330
Reducir, si buscas en la documentación,

207
00:10:31.330 --> 00:10:35.470
sabes que se necesita una expresión de función lambda.

208
00:10:35.470 --> 00:10:40.470
Así que voy a decir lambda total, y luego elemento.

209
00:10:40.730 --> 00:10:43.699
Así que estos son los argumentos que estamos pasando

210
00:10:43.699 --> 00:10:45.980
a esa función de lambda.

211
00:10:45.980 --> 00:10:50.083
Y luego dentro de aquí vamos a pasar un bloque de código

212
00:10:50.083 --> 00:10:55.083
donde decimos total por elemento,

213
00:10:56.890 --> 00:11:01.488
y luego desde allí diremos lista_computada,

214
00:11:02.400 --> 00:11:03.910
y eso es todo.

215
00:11:03.910 --> 00:11:08.172
Así que lo que estamos haciendo aquí, y vas a ver,

216
00:11:08.172 --> 00:11:11.440
si nunca has usado reducir antes

217
00:11:11.440 --> 00:11:13.380
o cualquier tipo de programación funcional,

218
00:11:13.380 --> 00:11:15.310
esto puede parecerte muy raro.

219
00:11:15.310 --> 00:11:16.680
Así que vamos a repasar

220
00:11:16.680 --> 00:11:18.380
exactamente lo que está pasando.

221
00:11:18.380 --> 00:11:21.560
Reducir toma una función como argumento,

222
00:11:21.560 --> 00:11:25.060
y luego toma una lista.

223
00:11:25.060 --> 00:11:28.742
Así que, y lo que sea que pongas dentro de esa función

224
00:11:28.742 --> 00:11:32.440
es cualquier proceso que se vaya a ejecutar.

225
00:11:32.440 --> 00:11:35.320
Así que con esta función de lambda,

226
00:11:35.320 --> 00:11:38.100
le estamos pasando argumentos de total y elemento,

227
00:11:38.100 --> 00:11:40.550
y luego decimos que cada vez que

228
00:11:40.550 --> 00:11:42.510
que llames a esta función lambda,

229
00:11:42.510 --> 00:11:44.150
que se va a llamar,

230
00:11:44.150 --> 00:11:48.480
en cada elemento de nuestra lista computada aquí mismo,

231
00:11:48.480 --> 00:11:50.650
queremos que tomas el total,

232
00:11:50.650 --> 00:11:53.930
el cual mantiene un registro de lo que sea que sea el total,

233
00:11:53.930 --> 00:11:56.810
y eso es algo específico de la función de reducir.

234
00:11:56.810 --> 00:11:58.630
Así que quiero que tomes el total

235
00:11:58.630 --> 00:12:01.530
y multiplicarlo por el elemento.

236
00:12:01.530 --> 00:12:05.050
Y eso es todo lo que necesitas hacer

237
00:12:05.050 --> 00:12:06.550
para que eso funcione.

238
00:12:06.550 --> 00:12:09.000
Ahora, antes de que hagamos algo,

239
00:12:09.000 --> 00:12:11.430
vamos a probar esto para asegurarnos de que

240
00:12:11.430 --> 00:12:14.103
no tenga ningún error tipográfico ni nada parecido.

241
00:12:14.950 --> 00:12:17.010
Y luego repasaremos algunos ejemplos más

242
00:12:17.010 --> 00:12:20.370
de lo que realmente está haciendo.

243
00:12:20.370 --> 00:12:24.686
Así que déjame empezar con Pipenv Shell para asegurarme

244
00:12:24.686 --> 00:12:26.970
estamos trabajando con la versión correcta de Python.

245
00:12:26.970 --> 00:12:30.450
Y ahora Python, vamos a ejecutar esto.

246
00:12:30.450 --> 00:12:34.590
Este es el manual exponente,

247
00:12:34.590 --> 00:12:37.260
y puedes ver que está funcionando perfectamente.

248
00:12:37.260 --> 00:12:39.720
Así que estamos teniendo exactamente el mismo comportamiento

249
00:12:39.720 --> 00:12:41.840
que teníamos antes, pero ahora estamos usando

250
00:12:41.840 --> 00:12:44.670
un enfoque funcional para lo que estamos

251
00:12:44.670 --> 00:12:46.550
construyendo con la solución.

252
00:12:46.550 --> 00:12:50.350
Así que esto es algo que recomiendo encarecidamente

253
00:12:50.350 --> 00:12:52.930
que si no entendías esto

254
00:12:52.930 --> 00:12:56.330
o no entendías la solución, que tomes este código

255
00:12:56.330 --> 00:12:57.840
y practiques con él tú mismo.

256
00:12:57.840 --> 00:13:00.220
Así que revisa la documentación,

257
00:13:00.220 --> 00:13:02.000
miras todos los ejemplos,

258
00:13:02.000 --> 00:13:04.520
y luego ves exactamente lo que

259
00:13:04.520 --> 00:13:06.660
cada uno de estos elementos representa.

260
00:13:06.660 --> 00:13:08.410
Porque si vienes aquí,

261
00:13:08.410 --> 00:13:10.235
podemos repasar exactamente

262
00:13:10.235 --> 00:13:12.260
lo que está pasando en cada etapa.

263
00:13:12.260 --> 00:13:14.580
Así que la forma en que funciona una función lambda,

264
00:13:14.580 --> 00:13:17.290
es realmente como una función normal.

265
00:13:17.290 --> 00:13:19.830
Así que es como si estuviera haciendo algo como esto.

266
00:13:19.830 --> 00:13:24.240
Y por cierto, si también ves algunos de mis otros vídeos

267
00:13:24.240 --> 00:13:26.750
donde he hablado de la función de reducir,

268
00:13:26.750 --> 00:13:29.860
He pasado por algunas de estas explicaciones antes,

269
00:13:29.860 --> 00:13:32.260
así que me disculpo por la duplicación.

270
00:13:32.260 --> 00:13:35.010
Pero espero que esto ayude a reforzarlo.

271
00:13:35.010 --> 00:13:37.400
Así que recuerda que Lambda es sólo una función.

272
00:13:37.400 --> 00:13:39.300
Es una función sin nombre.

273
00:13:39.300 --> 00:13:41.700
También se llama función anónima.

274
00:13:41.700 --> 00:13:45.300
Así que es muy similar a si yo hiciera algo así,

275
00:13:45.300 --> 00:13:49.740
donde dije alguna_función, y luego pasé argumentos

276
00:13:49.740 --> 00:13:52.740
como total y luego elemento,

277
00:13:52.740 --> 00:13:56.120
y luego dentro dije, quiero que devuelvas

278
00:13:57.010 --> 00:14:01.180
el total por el elemento,

279
00:14:01.180 --> 00:14:06.180
y entonces lo que reducir hace es reducir iteraciones sobre

280
00:14:06.277 --> 00:14:09.730
cualquier lista que le pasemos.

281
00:14:09.730 --> 00:14:13.970
Así que reducir va a tomar nuestra lista computada

282
00:14:13.970 --> 00:14:18.170
y luego cada vez que se itera,

283
00:14:18.170 --> 00:14:23.170
así que si tenemos una lista de uno, dos y tres,

284
00:14:23.290 --> 00:14:27.270
lo que va a hacer es reducir, va a

285
00:14:27.270 --> 00:14:32.270
pasar alguna, si puedo escribirlo, aquí tienes.

286
00:14:32.330 --> 00:14:35.160
Así que reducir va a pasar alguna_función.

287
00:14:35.160 --> 00:14:37.550
Va a empezar con un total,

288
00:14:37.550 --> 00:14:41.060
así que va a empezar con un total de cero por defecto,

289
00:14:41.060 --> 00:14:43.330
y luego va a tomar el primer elemento,

290
00:14:43.330 --> 00:14:45.640
que en este caso es uno.

291
00:14:45.640 --> 00:14:48.016
Y hace un poco de magia

292
00:14:48.016 --> 00:14:50.310
sólo para que lo sepas,

293
00:14:50.310 --> 00:14:53.220
porque puede ser un poco confuso para ti

294
00:14:53.220 --> 00:14:56.770
que si técnicamente empezabas con cero

295
00:14:56.770 --> 00:14:59.880
y lo multiplicaste, luego tu suma,

296
00:14:59.880 --> 00:15:01.780
o entonces tu producto para todos los exponentes

297
00:15:01.780 --> 00:15:03.210
también sería cero.

298
00:15:03.210 --> 00:15:04.450
Hacen algunas comprobaciones de errores

299
00:15:04.450 --> 00:15:06.080
para asegurarse de que eso no ocurra,

300
00:15:06.080 --> 00:15:08.380
así que es un poco más parecido a,

301
00:15:08.380 --> 00:15:12.000
entiende que necesita saltarse ese primer paso.

302
00:15:12.000 --> 00:15:16.630
Así que va a decir, bien, uno por uno es uno.

303
00:15:16.630 --> 00:15:19.350
Luego va a bajar y el siguiente paso,

304
00:15:19.350 --> 00:15:22.010
va a decir, está bien, tenemos el total de uno,

305
00:15:22.010 --> 00:15:25.350
pero el siguiente elemento aquí es dos.

306
00:15:25.350 --> 00:15:29.550
Así que va a decir que dos veces uno es dos,

307
00:15:29.550 --> 00:15:31.005
y entonces va a seguir

308
00:15:31.005 --> 00:15:34.190
yendo por la línea así.

309
00:15:34.190 --> 00:15:37.750
Así que en este caso, lo que queríamos que hiciera

310
00:15:37.750 --> 00:15:39.930
era trabajar como un exponente.

311
00:15:39.930 --> 00:15:41.350
Así que se va a tomar el total,

312
00:15:41.350 --> 00:15:44.450
y luego va a continuar la línea.

313
00:15:44.450 --> 00:15:45.600
Si quieres echar un vistazo a

314
00:15:45.600 --> 00:15:47.563
el ejemplo exacto que teníamos,

315
00:15:48.800 --> 00:15:50.220
esto sería lo mismo que decir,

316
00:15:50.220 --> 00:15:52.130
Oh, no dos, tres, cuatro,

317
00:15:52.130 --> 00:15:54.120
dos, dos, dos.

318
00:15:54.120 --> 00:15:56.310
Así que la primera vez que pasa,

319
00:15:56.310 --> 00:15:58.760
va a fijar este valor en dos,

320
00:15:58.760 --> 00:16:01.250
y luego se verá y dirá que está bien,

321
00:16:01.250 --> 00:16:03.480
el primer elemento es dos, así que son cuatro,

322
00:16:03.480 --> 00:16:05.510
y luego va a pasar por eso de nuevo.

323
00:16:05.510 --> 00:16:08.130
El total la próxima vez será de cuatro.

324
00:16:08.130 --> 00:16:10.230
Y luego lo multiplicará por dos,

325
00:16:10.230 --> 00:16:13.270
y luego vas a terminar devolviendo ocho,

326
00:16:13.270 --> 00:16:15.700
que es exactamente lo que tenemos.

327
00:16:15.700 --> 00:16:18.250
Así es como se reducen las obras.

328
00:16:18.250 --> 00:16:19.950
Se itera sobre una lista,

329
00:16:19.950 --> 00:16:22.114
sea cual sea la colección que pases.

330
00:16:22.114 --> 00:16:25.500
En nuestro caso pasamos esa lista computada

331
00:16:25.500 --> 00:16:27.780
que se vería exactamente así,

332
00:16:27.780 --> 00:16:29.580
y luego se itera,

333
00:16:29.580 --> 00:16:33.823
y luego ejecuta cualquier proceso que le digas que ejecute.

334
00:16:35.010 --> 00:16:38.018
Así que en este caso se ejecuta esta función lambda

335
00:16:38.018 --> 00:16:40.790
donde toma el total y el elemento

336
00:16:40.790 --> 00:16:43.170
y luego los multiplica juntos

337
00:16:43.170 --> 00:16:44.860
y luego hace un seguimiento del total.

338
00:16:44.860 --> 00:16:47.010
Así que sigue añadiendo a eso.

339
00:16:47.010 --> 00:16:50.070
Mantiene el estado del total.

340
00:16:50.070 --> 00:16:52.380
Así que recomiendo encarecidamente que te conviertas

341
00:16:52.380 --> 00:16:53.988
tan familiarizado como sea posible

342
00:16:53.988 --> 00:16:55.690
con funciones como reducir.

343
00:16:55.690 --> 00:16:57.870
Es una de las funciones principales,

344
00:16:57.870 --> 00:17:00.000
y es parte de la razón por la que sigo mencionándola

345
00:17:00.000 --> 00:17:01.920
en algunos de estos ejercicios de codificación,

346
00:17:01.920 --> 00:17:04.420
porque es muy popular

347
00:17:04.420 --> 00:17:06.828
para ser utilizado en la codificación

348
00:17:06.828 --> 00:17:08.120
de preguntas de entrevista,

349
00:17:08.120 --> 00:17:11.306
y también es una herramienta muy poderosa

350
00:17:11.306 --> 00:17:14.247
que te permite construir rápidamente

351
00:17:14.247 --> 00:17:16.239
este tipo de característica funcional

352
00:17:16.239 --> 00:17:17.883
en tus propios programas.

