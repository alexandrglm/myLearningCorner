WEBVTT

1
00:00:00.820 --> 00:00:02.520
<v Instructor>He actualizado el código inicial</v>

2
00:00:02.520 --> 00:00:04.900
que tenemos aquí y como pueden ver

3
00:00:04.900 --> 00:00:07.830
ahora tenemos algunos componentes diferentes.

4
00:00:07.830 --> 00:00:11.110
Si ven al lado HTML, he agregado

5
00:00:11.110 --> 00:00:13.750
una descripción, o debería decir he anidado

6
00:00:13.750 --> 00:00:15.990
lo que solía ser la página de contenido dentro

7
00:00:15.990 --> 00:00:19.470
de esta clase de descripción y luego también agregué

8
00:00:19.470 --> 00:00:22.510
una barra lateral div en clase.

9
00:00:22.510 --> 00:00:25.510
Y como podrán haber notado, literalmente es

10
00:00:25.510 --> 00:00:28.730
idéntico a lo que tenemos justo aquí.

11
00:00:28.730 --> 00:00:31.130
Y así esto es algo con lo que se cruzarán

12
00:00:31.130 --> 00:00:33.960
muy seguido al estar en aplicaciones de desarrollo,

13
00:00:33.960 --> 00:00:38.450
es cuando tienes estilos literalmente idénticos

14
00:00:38.450 --> 00:00:42.150
o muy, muy cercanos al mismo estilo que necesita

15
00:00:42.150 --> 00:00:45.410
ser ubicado a través de una aplicación entera.

16
00:00:45.410 --> 00:00:50.300
Allí es donde llegamos a como aventajarnos de los Mixins.

17
00:00:50.300 --> 00:00:53.440
Y así esto va a ser un ejemplo donde podemos

18
00:00:53.440 --> 00:00:57.700
tomar el código que comienza con mucha duplicación

19
00:00:57.700 --> 00:00:59.840
y sería muy desastroso de cambiar.

20
00:00:59.840 --> 00:01:02.410
Y hemos hablado sobre cómo las variables

21
00:01:02.410 --> 00:01:05.130
son excelentes para ayudar a limpiar

22
00:01:05.130 --> 00:01:08.970
duplicación, pero las variables solo pueden ir hasta allí.

23
00:01:08.970 --> 00:01:11.470
Cuando necesitas poder almacenar un amplio

24
00:01:11.470 --> 00:01:15.170
número de elementos o, como verán luego

25
00:01:15.170 --> 00:01:17.450
en el curso, cuando necesiten tener conducta

26
00:01:17.450 --> 00:01:20.140
dinámica, entonces necesitan que ciertos estilos

27
00:01:20.140 --> 00:01:22.820
se muestren en ciertas condiciones y otros

28
00:01:22.820 --> 00:01:26.220
se muestran para otras, entonces allí es donde los Mixins

29
00:01:26.220 --> 00:01:29.540
realmente comienzan a mostrar cuán útiles son.

30
00:01:29.540 --> 00:01:32.490
Y es una enorme razón por la que SCSS se ha vuelto

31
00:01:32.490 --> 00:01:35.120
tan popular a través de los años, porque te permite

32
00:01:35.120 --> 00:01:38.320
envolver funcionalidad que uses un poco

33
00:01:38.320 --> 00:01:41.010
y llamarla desde cualquier parte en la aplicación.

34
00:01:41.010 --> 00:01:43.960
Entonces, si están acostumbrados a trabajar con métodos

35
00:01:43.960 --> 00:01:46.170
o funciones en lenguaje de programación,

36
00:01:46.170 --> 00:01:49.300
puedes pensar sobre los Mixins de SCSS prácticamente

37
00:01:49.300 --> 00:01:50.650
de la misma forma.

38
00:01:50.650 --> 00:01:52.570
Así que veamos el código que tenemos por aquí.

39
00:01:52.570 --> 00:01:55.800
Tenemos un, dos componentes que son completamente

40
00:01:55.800 --> 00:01:59.300
idénticos y uno es la barra lateral,

41
00:01:59.300 --> 00:02:02.530
el otro es la sección destacada.

42
00:02:02.530 --> 00:02:05.520
Y si pueden venir dentro de la clase destacada

43
00:02:05.520 --> 00:02:08.230
anidada, pueden ver que tenemos un color de tomate,

44
00:02:08.230 --> 00:02:11.590
una liga de subtítulo anidado con su propio

45
00:02:11.590 --> 00:02:14.740
respectivo, un estado de deslizado con su propio color

46
00:02:14.740 --> 00:02:16.270
y decoración de texto.

47
00:02:16.270 --> 00:02:18.940
Si pueden bajar completamente hasta el fondo,

48
00:02:18.940 --> 00:02:21.290
pueden ver la clase de barra lateral

49
00:02:21.290 --> 00:02:23.890
y dentro de la clase de barra lateral, estamos llamando

50
00:02:23.890 --> 00:02:27.730
cosas tales como la familia de fuentes, el alineamiento de

51
00:02:27.730 --> 00:02:31.460
texto y toda esta clase de componentes.

52
00:02:31.460 --> 00:02:35.020
Entonces, lo que tenemos aquí es idéntico pero tenemos

53
00:02:35.020 --> 00:02:37.000
algunas cosas que hemos añadido.

54
00:02:37.000 --> 00:02:39.750
Y entonces esto va a mostrar cómo los Mixins

55
00:02:39.750 --> 00:02:41.700
pueden ser llamados, pero tienen un poco

56
00:02:41.700 --> 00:02:43.000
de flexibilidad.

57
00:02:43.000 --> 00:02:45.017
Cuando vayamos a la siguiente guía, voy a mostrarles

58
00:02:45.017 --> 00:02:47.280
cómo tienen mucha flexibilidad

59
00:02:47.280 --> 00:02:49.100
cuando implementas condicionales.

60
00:02:49.100 --> 00:02:53.680
Pero por ahora, hay que solo usar una implementación básica.

61
00:02:53.680 --> 00:02:56.680
Entonces, lo que vamos a hacer vendrá

62
00:02:56.680 --> 00:02:59.710
al subtítulo, o dentro de la sección destacada,

63
00:02:59.710 --> 00:03:02.100
y voy a cortar todo eso.

64
00:03:02.100 --> 00:03:04.030
Y como pueden ver, esto cambiará solo

65
00:03:04.030 --> 00:03:07.230
a los básicos por defecto, y en la parte más superior

66
00:03:07.230 --> 00:03:10.700
del archivo, voy a crear un Mixin.

67
00:03:10.700 --> 00:03:15.620
Y voy a llamarlo destacado y solo dejarlo allí.

68
00:03:15.620 --> 00:03:19.270
Y dentro de algunos corchetes curvados, voy a pegar

69
00:03:19.270 --> 00:03:21.470
todos esos estilos.

70
00:03:21.470 --> 00:03:25.010
Ahora, para llamar esto, todo lo que tengo que hacer

71
00:03:25.010 --> 00:03:27.330
es llamar destacado.

72
00:03:27.330 --> 00:03:32.330
Entonces, puedo decir al importar y decir destacado

73
00:03:33.930 --> 00:03:38.050
y, oh, y realmente no es importar, es incluir.

74
00:03:38.050 --> 00:03:39.830
Importar es cuando introduces otro archivo.

75
00:03:39.830 --> 00:03:41.920
Incluir es cuando estás llamando un Mixin.

76
00:03:41.920 --> 00:03:44.000
Y entonces, justo aquí estás llamando incluir

77
00:03:44.000 --> 00:03:46.890
destacado y pueden ver que ahora, aunque

78
00:03:46.890 --> 00:03:48.920
no tenemos nada de ese código aquí,

79
00:03:48.920 --> 00:03:51.990
lo que SCSS hizo durante el proceso de pre-compilación

80
00:03:51.990 --> 00:03:55.840
es traer todo de él en sí mismo y colocarlo

81
00:03:55.840 --> 00:03:57.140
dentro del destacado.

82
00:03:57.140 --> 00:04:00.110
Pero cuando hagamos un cambio a cualquier cosa

83
00:04:00.110 --> 00:04:03.240
justo aquí, entonces si fuera a cambiar tomate

84
00:04:03.240 --> 00:04:06.390
por rojo, cambiaría, o haría cambiar un poco

85
00:04:06.390 --> 00:04:09.100
más fácil de ver, si cambiara a negro,

86
00:04:09.100 --> 00:04:10.990
entonces cambia justo allí.

87
00:04:10.990 --> 00:04:12.470
Entonces, esa es la primer parte.

88
00:04:12.470 --> 00:04:15.070
Ahora, esto es agradable, pero veamos cómo podemos hacer

89
00:04:15.070 --> 00:04:18.320
lo mismo abajo para nuestra barra lateral.

90
00:04:18.320 --> 00:04:20.270
Entonces, si vienes hasta el fondo,

91
00:04:20.270 --> 00:04:21.870
no queremos deshacernos de todo

92
00:04:21.870 --> 00:04:25.250
porque queremos esta Verdana allí y queremos

93
00:04:25.250 --> 00:04:28.430
el texto alineado a la derecha y queremos el ancho.

94
00:04:28.430 --> 00:04:31.480
Queremos esos elementos, pero queremos deshacernos

95
00:04:31.480 --> 00:04:33.260
de todo aquí.

96
00:04:33.260 --> 00:04:37.830
Entonces si lo pego y doy clic en guardar,

97
00:04:37.830 --> 00:04:41.420
pueden ver que todo está funcionando exactamente igual.

98
00:04:41.420 --> 00:04:43.800
Así, aunque nuestra barra lateral tiene algunos elementos

99
00:04:43.800 --> 00:04:46.670
que son diferentes y únicos, podemos aún

100
00:04:46.670 --> 00:04:50.910
solo llamar estos Mixins y todo lo que SCSS está haciendo

101
00:04:50.910 --> 00:04:52.970
es que solo lo trae por nosotros.

102
00:04:52.970 --> 00:04:55.290
es como si de alguna forma estuviéramos haciendo el trabajo

103
00:04:55.290 --> 00:04:56.800
duro de copiar y pegar.

104
00:04:56.800 --> 00:04:58.940
SCSS lo hace por nosotros durante

105
00:04:58.940 --> 00:05:00.970
ese proceso de precompilación.

106
00:05:00.970 --> 00:05:04.060
Si fueran a abrir la fuente para este archivo

107
00:05:04.060 --> 00:05:07.040
en el SCSS con el que se ha cumplido completamente,

108
00:05:07.040 --> 00:05:09.320
verán que es exactamente la forma

109
00:05:09.320 --> 00:05:12.220
en que fue antes, tiene todos esos estilos

110
00:05:12.220 --> 00:05:15.030
y todos están dentro de la barra lateral.

111
00:05:15.030 --> 00:05:18.500
SCSS nos permite traerlos y hacer

112
00:05:18.500 --> 00:05:20.810
mucho más fácil lidiar con ese código.

113
00:05:20.810 --> 00:05:23.970
Entonces, ahora si vengo aquí y por alguna razón

114
00:05:23.970 --> 00:05:27.690
esto se cambia a negro, pueden ver que ahora

115
00:05:27.690 --> 00:05:31.200
los cambios se poblan en ambos puntos.

116
00:05:31.200 --> 00:05:33.050
Entonces, la forma que personalmente me gusta pensar

117
00:05:33.050 --> 00:05:35.100
sobre los Mixins, uno, pienso en ellos como en

118
00:05:35.100 --> 00:05:37.040
un método donde pueden ser llamados desde cualquier lugar

119
00:05:37.040 --> 00:05:38.200
en la aplicación.

120
00:05:38.200 --> 00:05:40.370
También me gusta pensar en ellos como muy

121
00:05:40.370 --> 00:05:42.580
poderosas variables, así como la forma

122
00:05:42.580 --> 00:05:45.390
donde hicimos un cambio para solo un valor

123
00:05:45.390 --> 00:05:47.730
de una variable en el mero comienzo

124
00:05:47.730 --> 00:05:50.920
y se pobló al resto de la aplicación.

125
00:05:50.920 --> 00:05:52.720
Lo mismo con Mixins.

126
00:05:52.720 --> 00:05:54.870
Ahora, esto es solo una parte de Mixins,

127
00:05:54.870 --> 00:05:55.980
y esto es muy genial.

128
00:05:55.980 --> 00:05:58.530
Esto es muy útil para crear componentes de código

129
00:05:58.530 --> 00:06:01.410
reutilizable que pueden ser llamados desde cualquier otra

130
00:06:01.410 --> 00:06:04.860
parte en cualquier otro archivo SCSS y puedes solo

131
00:06:04.860 --> 00:06:07.750
reusar esos sin tener que copiar y pegar

132
00:06:07.750 --> 00:06:09.990
un grupo completo de definiciones de estilo.

133
00:06:09.990 --> 00:06:11.710
Pero en la siguiente guía, vamos a entrar

134
00:06:11.710 --> 00:06:14.900
en el poder real de cómo los Mixins

135
00:06:14.900 --> 00:06:17.980
pueden ser apalancados y cómo vamos a implementar

136
00:06:17.980 --> 00:06:18.870
algo muy genial.

137
00:06:18.870 --> 00:06:22.580
Vamos a implementar un grupo Flex Box completo

138
00:06:22.580 --> 00:06:25.580
de estilos, así que solo necesitamos llamar una sola

139
00:06:25.580 --> 00:06:28.670
caja flex Mixin en lugar de tener que escribirla

140
00:06:28.670 --> 00:06:30.283
manualmente cada vez.

